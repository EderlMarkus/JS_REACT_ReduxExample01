{"version":3,"sources":["store/actions/actions.js","store/actions/actions_type.js","elements/button.js","containers/container1.js","elements/userInput.js","containers/container2.js","containers/container3.js","App.js","serviceWorker.js","store/reducers/user_reducer.js","store/reducers/index.js","index.js"],"names":["user_input","text","type","payload","MyButton","Fragment","Button","variant","style","this","props","onClick","onClickFunction","textValue","Component","Container1","border","width","margin","buttonStyle","state","showReduxState","setState","toggleState","action","button_text","state1","connect","user_reducer","dispatch","ACTIONS","UserInput","textAlign","event","fleldVal","target","value","InputGroup","Prepend","FormControl","onChange","handleChange","bind","placeholder","currentState","Container2","Container3","App","className","Boolean","window","location","hostname","match","initialState","UserReducer","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d7ad733.chunk.js","sourcesContent":["import * as ACTION_TYPES from './actions_type';\r\n\r\nexport const user_input = text => {\r\n  return {\r\n    type: ACTION_TYPES.USER_INPUT,\r\n    payload: text\r\n  };\r\n};\r\n","export const USER_INPUT = 'USER_INPUT';\r\n","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class MyButton extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Button\r\n          variant=\"outline-primary\"\r\n          style={this.props.style}\r\n          onClick={this.props.onClickFunction}\r\n        >\r\n          {this.props.textValue}\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport * as ACTION_TYPES from '../store/actions/actions_type';\r\nimport * as ACTIONS from '../store/actions/actions';\r\nimport { connect } from 'react-redux';\r\nimport MyButton from '../elements/button';\r\n\r\nclass Container1 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showReduxState: false\r\n    };\r\n  }\r\n\r\n  toggleState() {\r\n    this.setState({ showReduxState: !this.state.showReduxState });\r\n  }\r\n\r\n  style = {\r\n    border: 'solid 1px #41E0FD',\r\n    width: '98%',\r\n    margin: '2% auto 2% auto'\r\n  };\r\n\r\n  buttonStyle = {\r\n    margin: '2%'\r\n  };\r\n\r\n  render() {\r\n    const user_text1 = 'lorem';\r\n    const user_text2 = 'ipsum';\r\n    const user_text3 = 'lorem ipsum';\r\n\r\n    const button_text = 'Change State to ';\r\n\r\n    return (\r\n      <div style={this.style}>\r\n        <h3>Container1</h3>\r\n        <p>This Container changes the Global State with Buttons</p>\r\n        <MyButton\r\n          onClickFunction={() => this.toggleState()}\r\n          textValue={\r\n            this.state.showReduxState\r\n              ? 'Hide Current State'\r\n              : 'Show Current State'\r\n          }\r\n          style={this.buttonStyle}\r\n        ></MyButton>\r\n\r\n        <MyButton\r\n          onClickFunction={() => this.props.action(user_text1)}\r\n          textValue={button_text + user_text1}\r\n          style={this.buttonStyle}\r\n        ></MyButton>\r\n\r\n        <MyButton\r\n          onClickFunction={() => this.props.action(user_text2)}\r\n          textValue={button_text + user_text2}\r\n          style={this.buttonStyle}\r\n        ></MyButton>\r\n\r\n        <MyButton\r\n          onClickFunction={() => this.props.action(user_text3)}\r\n          textValue={button_text + user_text3}\r\n          style={this.buttonStyle}\r\n        ></MyButton>\r\n\r\n        <p>\r\n          {this.state.showReduxState\r\n            ? 'The current State is: ' + this.props.state1\r\n            : null}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    state1: state.user_reducer.user_input\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    action: text => dispatch(ACTIONS.user_input(text))\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Container1);\r\n","import React, { Component } from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport * as ACTIONS from '../store/actions/actions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass UserInput extends Component {\r\n  style = { width: '94%', textAlign: 'center', margin: '0 auto 3% auto' };\r\n\r\n  handleChange(event) {\r\n    let fleldVal = event.target.value;\r\n    this.props.action(fleldVal);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={this.style}>\r\n        <InputGroup>\r\n          <InputGroup.Prepend></InputGroup.Prepend>\r\n          <FormControl\r\n            onChange={this.handleChange.bind(this)}\r\n            placeholder={this.props.currentState}\r\n            value={this.props.currentState}\r\n          />\r\n        </InputGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currentState: state.user_reducer.user_input\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    action: text => dispatch(ACTIONS.user_input(text))\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserInput);\r\n","import React, { Component } from 'react';\r\nimport UserInput from '../elements/userInput';\r\n\r\nclass Container2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showReduxState: false\r\n    };\r\n  }\r\n\r\n  toggleState() {\r\n    this.setState({ showReduxState: !this.state.showReduxState });\r\n  }\r\n\r\n  style = {\r\n    border: 'solid 1px #41E0FD',\r\n    width: '98%',\r\n    margin: '2% auto 2% auto'\r\n  };\r\n\r\n  render() {\r\n    const user_text1 = 'lorem';\r\n    const user_text2 = 'ipsum';\r\n    const user_text3 = 'lorem ipsum';\r\n\r\n    const button_text = 'Change State to ';\r\n\r\n    return (\r\n      <div style={this.style}>\r\n        <h3>Container2</h3>\r\n        <p>In this Container you can set the Global State manually.</p>\r\n        <UserInput></UserInput>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container2;\r\n","import React, { Component } from 'react';\r\nimport * as ACTION_TYPES from '../store/actions/actions_type';\r\nimport * as ACTIONS from '../store/actions/actions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Container3 extends Component {\r\n  style = {\r\n    border: 'solid 1px #41E0FD',\r\n    width: '98%',\r\n    margin: 'auto'\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={this.style}>\r\n        <h3>Container3</h3>\r\n        <p>This is a seperate Container that reads from the Global State</p>\r\n\r\n        <p>The current State is: {this.props.user_input}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    state1: state.state1,\r\n    user_input: state.user_reducer.user_input\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Container3);\r\n","import React from 'react';\n\nimport Container1 from './containers/container1';\nimport Container2 from './containers/container2';\nimport Container3 from './containers/container3';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h3>Redux Example</h3>\n      <p>Each of these 3 Containers is a seperate React-Class-Component.</p>\n      <p>The State is being passed between those Components by Redux.</p>\n\n      <Container1></Container1>\n      <Container2></Container2>\n      <Container3></Container3>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as ACTION_TYPES from '../actions/actions_type';\r\n\r\nconst initialState = {\r\n  user_input: 'no input'\r\n};\r\n\r\nconst UserReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.USER_INPUT:\r\n      return {\r\n        ...state,\r\n        user_input: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default UserReducer;\r\n","import UserReducer from './user_reducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport const rootReducer = combineReducers({\r\n  user_reducer: UserReducer\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './store/reducers/';\nimport { createStore } from 'redux';\n\nlet store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}